exit
neighbors
n
board
c
disp [x,y]
exit
s
n
c
disp board
disp result
exit
s
n
c
disp result
disp board
exit
s
disp board
s
disp result
s
result
board
neighbors
n
display neighbors
disp board[x][y]
n
exit
n
board
neighbors
n
exit
s
exit
s
up
s
n
s
exit
exti
board[x][y]
board
neighbors
exit
board
board[x][y]
neighbors
exit
last
@array
s
n
heap.length
heap
result
n
heap.length
result
n
heap.length
result
n
result
n
c
exit
c
result
n
result
heap.length
heap
n
current > right_child
current > left_child
current
c
disp left_child
disp right_child
disp self
disp current
idx
exit
idx
current
c
disp self
disp right_child
disp left_child
disp current
exit
self
idx
current
c
right_child
left_child
current
exit
n
heap.length
heap.min
letter
hash
hash[letter]
n
letter
heap
n
heap
n
string
letter
heap
n
letter
heap
n
heap
n
heap
n
letter
n
heap
n
letter
n
heap
n
heap
n
letter
heap
n
letter
heap
n
heap
n
heap
n
heap
n
heap
n
heap
n
exit
letter
heap
n
heap
n
heap
n
exit
heap
n
hash
n
heap
n
exit
left_child
parent
right_child
right_child_idx
n
left_child
left_child_idx
n
parent
s
idx
parent_idx
n
s
idx
self
s
n
heap
n
exit
letter
heap
n
hash
n
heap
n
s
heap
hash
c
right_child_idx
n
left_child_idx
n
parent_idx
n
length
@array
c
n
left_child_idx
n
@array
parent_idx
n
s
@array
self.length
exit
self.length
@array
exit
self.length
@array
exit
exot
i
j
display set
set
exit
set.include?("u")
s[j]
j
display set
set
s
s.add(1)
s[:a]
s = Set.new
require 'set'
include 'set'
include Set
s = Set.new
hash
s[1]
i2
s
hash
exit
c
temp
s
hash[s[i2]]
